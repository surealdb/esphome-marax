substitutions:
  esp_name: "MaraX"
  esp_hostname: "esphome-marax"

esphome:
  name: ${esp_hostname}
  friendly_name: "MaraX"

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "dRo6fsq1XYVWKGGW8E0uVEHt6HXz4oaJfg8fZGfWlJI="

ota:

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  # While some options can reduce the power usage of the ESP, they generally also decrease the reliability 
  # of the WiFi connection, with frequent disconnections from the router in the highest power saving mode.
  power_save_mode: none
  manual_ip:
    # Set this to the IP of the ESP
    static_ip: 192.168.178.212
    # Set this to the IP address of the router. Often ends with .1
    gateway: 192.168.178.1
    # The subnet of the network. 255.255.255.0 works for most home networks.
    subnet: 255.255.255.0
    dns1: 192.168.178.1
  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Esphome-Web-29Dd60"
    password: "M8J5FyGyR9mz"

captive_portal:

sensor:
  - platform: template
    name: "Dampf Temp."
    id: "steam_actual"
    update_interval: 5s
    unit_of_measurement: "째C"
    device_class: "temperature"
    state_class: "measurement"
    accuracy_decimals: 1
  - platform: template
    name: "Dampf Zieltemp."
    id: "steam_target"
    update_interval: 5s
    unit_of_measurement: "째C"
    device_class: "temperature"
    state_class: "measurement"
    accuracy_decimals: 1
  - platform: template
    name: "HX Temp."
    id: "heat_actual"
    update_interval: 5s
    unit_of_measurement: "째C"
    device_class: "temperature"
    state_class: "measurement"
    accuracy_decimals: 1
  # countdown for 'boost-mode'
  - platform: template
    name: "Boost Countdown"
    id: "boost_countdown"
    update_interval: 1s
    unit_of_measurement: "s"
  # Uptime sensor.
  - platform: uptime
    name: Uptime
    id: "esp_uptime"
  # WiFi Signal sensor.
  - platform: wifi_signal
    name: WiFi Signal
    update_interval: 20s
  # coffee pull duration sensor
  - platform: template
    name: "Bezugsdauer"
    id: "timeElapsedSincePumpStarted"
    update_interval: 1s
    unit_of_measurement: "s"
    lambda: |-
      return round(id(state_timeElapsedSincePumpStarted) / 1000);
  # Duration between to coffee pulls sensor
  - platform: template
    name: "Zeit zwischen Bez체gen"
    id: "timeElapsedSincePumpStopped"
    update_interval: 1s
    unit_of_measurement: "s"
    lambda: |-
      return round(id(state_timeElapsedSincePumpStopped) / 1000);

binary_sensor:
  - platform: template
    name: "Heizt"
    id: "heating"
    # not allowed here
    # update_interval: 5s
  - platform: template
    name: "Pumpe an"
    id: "pumpActive"
    # not allowed here
    # update_interval: 5s
        
# Text sensors with general information.
text_sensor:
  # Expose ESPHome version as sensor.
  - platform: version
    name: "ESPHome Version"
  # Expose WiFi information as sensors.
  - platform: wifi_info
    ip_address:
      name: IP
    ssid:
      name: SSID
    bssid:
      name: BSSID
    mac_address:
      name: Mac-Address
    scan_results:
      name: Wifi Scan
  - platform: template
    name: "Betriebsmodus"
    id: "opsType"
    filters:
      - map:
        - C -> Coffee Modus
        - S -> S Steam Modus
        - V -> V Steam Modus
        - X -> Offline
        - + -> MaraX Modus
    update_interval: 10s
  - platform: template
    name: "Firmware Version"
    id: "coffeeVersion"
    update_interval: 60s


# https://esphome.io/guides/automations.html#global-variables
globals:
  - id: state_previousTimestamp
    type: uint32_t
    restore_value: no
    initial_value: '0'
  - id: state_timeElapsedSincePumpStarted
    type: uint32_t
    restore_value: no
    initial_value: '0'
  - id: state_lastPumpStoppedTimestamp
    type: uint32_t
    restore_value: no
    initial_value: '0'
  - id: state_timeElapsedSincePumpStopped
    type: uint32_t
    restore_value: no
    initial_value: '0'


uart:
  baud_rate: 9600
  tx_pin: GPIO16
  rx_pin: GPIO17
  id: UART2
  debug:
    # https://community.home-assistant.io/t/how-to-uart-read-without-custom-component/491950 RX statt BOTH
    direction: BOTH
    dummy_receiver: true
    after:
      delimiter: "\r\n"
    sequence:
      - lambda: |-
          UARTDebug::log_string(direction, bytes);
          bool debugMode = true;
          char senType[1];
          char senVersion[4];
          int senSteamActual=0;
          int senSteamTarget=0;
          char senSteamTargetStr[3];
          int senHeatActual=0;
          int senBoostCountdown=0;
          int senHeating=0;
          int senPumpActive=0;
          
          uint32_t previousTimestamp=0;
          uint32_t currentTimestamp=0;
          uint32_t timeElapsedSincePumpStarted=0;
          uint32_t timeElapsedSincePumpStopped=0;
          uint32_t lastPumpStoppedTimestamp = 0;
          int lastPumpActiveState=0;
          
          char stringBuffer[10];
          std::string sensorValueText;
          
          std::string str(bytes.begin(), bytes.end());
          
          int elementCount = sscanf(str.c_str(), "%1c%4c,%d,%d,%d,%d,%d,%d", senType, senVersion, &senSteamActual, &senSteamTarget, &senHeatActual, &senBoostCountdown, &senHeating, &senPumpActive);
          
          if(debugMode) {
              ESP_LOGD("MaraX", "Element Count: %d \n", elementCount);
          }
          if(elementCount == 3) {
              if(debugMode) {
                  ESP_LOGD("MaraX", "Water container is removed: %d\n", 1);
              }
              
              elementCount = sscanf(str.c_str(), "%1c%4c,%d,%3c,%d,%d,%d,%d", senType, senVersion, &senSteamActual, senSteamTargetStr, &senHeatActual, &senBoostCountdown, &senHeating, &senPumpActive);
          }
          
          if (elementCount >= 7 ) {
              
              snprintf(stringBuffer, sizeof(stringBuffer), "%.1s", senType);
              sensorValueText = stringBuffer;
              if(debugMode) {
                  ESP_LOGD("MaraX", "Ops Mode: %s \n", sensorValueText.c_str());
              }
              id(opsType).publish_state(sensorValueText.c_str());
              
              snprintf(stringBuffer, sizeof(stringBuffer), "%.4s", senVersion);
              sensorValueText = stringBuffer;
              if(debugMode) {
                  ESP_LOGD("MaraX", "MaraX Firmware: %s \n", sensorValueText.c_str());
              }
              id(coffeeVersion).publish_state(sensorValueText.c_str());
              
              if(debugMode) {
                  ESP_LOGD("MaraX", "Steam Actual: %d \n", senSteamActual);
              }
              id(steam_actual).publish_state(senSteamActual);
              
              if(debugMode) {
                  ESP_LOGD("MaraX", "Steam Target: %d \n", senSteamTarget);
              }
              id(steam_target).publish_state(senSteamTarget);
              
              if(debugMode) {
                  ESP_LOGD("MaraX", "Heat Actual: %d \n", senHeatActual);
              }
              id(heat_actual).publish_state(senHeatActual);
              
              if(debugMode) {
                  ESP_LOGD("MaraX", "Boost Countdown: %d \n", senBoostCountdown);
              }
              id(boost_countdown).publish_state(senBoostCountdown);
              
              if(debugMode) {
                  ESP_LOGD("MaraX", "Is Heating: %d \n", senHeating);
              }
              id(heating).publish_state(senHeating);
              
              if(debugMode) {
                  ESP_LOGD("MaraX", "Pump is active: %d \n", senPumpActive);
              }
              
              currentTimestamp = millis();
              
              // READ current global state values
              
              previousTimestamp = id(state_previousTimestamp);
              //previousTimestamp = state_previousTimestamp; //TODO remove
              if (previousTimestamp == 0) {
                  previousTimestamp = currentTimestamp;
              }
              
              lastPumpActiveState = round(id(pumpActive).state);
              //lastPumpActiveState = pumpActive; //TODO remove
              
              timeElapsedSincePumpStarted = id(state_timeElapsedSincePumpStarted);
              //timeElapsedSincePumpStarted = state_timeElapsedSincePumpStarted; //TODO remove
              
              timeElapsedSincePumpStopped = id(state_timeElapsedSincePumpStopped);
              //timeElapsedSincePumpStopped = state_timeElapsedSincePumpStopped; //TODO remove
              
              lastPumpStoppedTimestamp = id(state_lastPumpStoppedTimestamp);
              //lastPumpStoppedTimestamp = state_lastPumpStoppedTimestamp; //TODO remove
              
              
              // while pump is active
              if(senPumpActive == 1 && currentTimestamp != 0) {
                  
                  // if the pump just started to be active
                  if (lastPumpActiveState == 0) {
                      if(debugMode) {
                          ESP_LOGD("MaraX", "The pump just started to be active as last state was: %d \n", lastPumpActiveState);
                      }
                      // reset time elapsed since pump started counter
                      timeElapsedSincePumpStarted = 0;
                                      
                  } else {
                      
                      //add up the elapsed "pump is active"-time
                      timeElapsedSincePumpStarted = timeElapsedSincePumpStarted + (currentTimestamp - previousTimestamp);
                      if(debugMode) {
                          ESP_LOGD("MaraX", "Time elapsed since pump started to be active: %d \n", timeElapsedSincePumpStarted);
                      }
                  }
              }
              
              // while the pump is NOT active
              if(senPumpActive == 0 && currentTimestamp != 0) {
                  
                  // when the pump has JUST stopped, but was active before
                  if(lastPumpActiveState == 1) {
                      
                      // save the timestamp when that Stop-Event happend
                      lastPumpStoppedTimestamp = currentTimestamp;
                      if(debugMode) {
                          ESP_LOGD("MaraX", "Pump has just stopped, but was active before. Stop event happend at timestamp: %d \n", lastPumpStoppedTimestamp);
                      }
                      // reset time elapsed since pump stopped counter
                      timeElapsedSincePumpStopped = 0;
                  }
                  // if pump is stopped, but was already active before (using the lastPumpStoppedTimestamp as an indicator for that)
                  else if (lastPumpStoppedTimestamp != 0) {
                  
                      //  increment the timeElapsedSincePumpStopped by the time elapsed meanwhile
                      timeElapsedSincePumpStopped = timeElapsedSincePumpStopped + (currentTimestamp - previousTimestamp);
                      if(debugMode) {
                          ESP_LOGD("MaraX", "Pump is stopped, but was active before at least once. Time elapsed stop of the pump: %d \n", timeElapsedSincePumpStopped);
                      }
                  }
              }

              
              // finally publish everything
              
              id(state_timeElapsedSincePumpStarted) = timeElapsedSincePumpStarted;
              //state_timeElapsedSincePumpStarted = timeElapsedSincePumpStarted; //TODO remove
              
              id(state_timeElapsedSincePumpStopped) = timeElapsedSincePumpStopped;
              //state_timeElapsedSincePumpStopped = timeElapsedSincePumpStopped; //TODO remove
              
              id(state_lastPumpStoppedTimestamp) = lastPumpStoppedTimestamp;
              //state_lastPumpStoppedTimestamp = lastPumpStoppedTimestamp; // TODO remove
              
              id(state_previousTimestamp) = currentTimestamp;
              //state_previousTimestamp = currentTimestamp; //TODO remove
              
              id(pumpActive).publish_state(senPumpActive);
              //pumpActive = senPumpActive; //TODO remove
          }
